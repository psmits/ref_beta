// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace reflected_beta_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <bool propto, typename T0__, typename T1__, typename T2__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
reflected_beta_log(const T0__& y,
                       const T1__& lambda,
                       const T2__& theta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ p;
            (void) p;  // dummy to suppress unused var warning
            stan::math::initialize(p, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 13;
            if (as_bool(logical_gt(lambda,0))) {
                current_statement_begin__ = 14;
                stan::math::assign(p, (((1 + lambda) / theta) * pow((y / theta),lambda)));
            } else if (as_bool(logical_lte(lambda,0))) {
                current_statement_begin__ = 16;
                stan::math::assign(p, (((1 - lambda) / theta) * pow((1 - (y / theta)),(lambda * -(1)))));
            }
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log(p));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
reflected_beta_log(const T0__& y,
                       const T1__& lambda,
                       const T2__& theta, std::ostream* pstream__) {
    return reflected_beta_log<false>(y,lambda,theta, pstream__);
}


struct reflected_beta_log_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                       const T1__& lambda,
                       const T2__& theta, std::ostream* pstream__) const {
        return reflected_beta_log(y, lambda, theta, pstream__);
    }
};

class reflected_beta_model : public prob_grad {
private:
    int N;
    int S;
    int L;
    vector<double> y;
    vector<int> taxon;
public:
    reflected_beta_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "reflected_beta_model_namespace::reflected_beta_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "L", "int", context__.to_vec());
        L = int(0);
        vals_i__ = context__.vals_i("L");
        pos__ = 0;
        L = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "taxon", "int", context__.to_vec(N));
        validate_non_negative_index("taxon", "N", N);
        taxon = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("taxon");
        pos__ = 0;
        size_t taxon_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < taxon_limit_0__; ++i_0__) {
            taxon[i_0__] = vals_i__[pos__++];
        }

        // validate data

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += S;
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += S;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~reflected_beta_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(S));
        vector_d theta(S);
        for (int j1__ = 0U; j1__ < S; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("shape")))
            throw std::runtime_error("variable shape missing");
        vals_r__ = context__.vals_r("shape");
        pos__ = 0U;
        context__.validate_dims("initialization", "shape", "double", context__.to_vec());
        double shape(0);
        shape = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,shape);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable shape: ") + e.what());
        }

        if (!(context__.contains_r("scale")))
            throw std::runtime_error("variable scale missing");
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        context__.validate_dims("initialization", "scale", "double", context__.to_vec());
        double scale(0);
        scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(S));
        vector_d lambda(S);
        for (int j1__ = 0U; j1__ < S; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta;
        (void) theta;   // dummy to suppress unused var warning
        if (jacobian__)
            theta = in__.vector_constrain(S,lp__);
        else
            theta = in__.vector_constrain(S);

        T__ shape;
        (void) shape;   // dummy to suppress unused var warning
        if (jacobian__)
            shape = in__.scalar_lb_constrain(0,lp__);
        else
            shape = in__.scalar_lb_constrain(0);

        T__ scale;
        (void) scale;   // dummy to suppress unused var warning
        if (jacobian__)
            scale = in__.scalar_lb_constrain(0,lp__);
        else
            scale = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  lambda;
        (void) lambda;   // dummy to suppress unused var warning
        if (jacobian__)
            lambda = in__.vector_constrain(S,lp__);
        else
            lambda = in__.vector_constrain(S);

        T__ mu;
        (void) mu;   // dummy to suppress unused var warning
        if (jacobian__)
            mu = in__.scalar_constrain(lp__);
        else
            mu = in__.scalar_constrain();

        T__ sigma;
        (void) sigma;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 41;
            lp_accum__.add((weibull_log(theta,shape,scale) - weibull_ccdf_log(L,shape,scale)));
            current_statement_begin__ = 43;
            lp_accum__.add(lognormal_log<propto__>(shape, 0, 0.29999999999999999));
            current_statement_begin__ = 44;
            lp_accum__.add(exponential_log<propto__>(scale, 0.25));
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(lambda, mu, sigma));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(mu, 0, 1));
            current_statement_begin__ = 48;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 50;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 51;
                lp_accum__.add(reflected_beta_log<propto__>(get_base1(y,n,"y",1), get_base1(lambda,get_base1(taxon,n,"taxon",1),"lambda",1), get_base1(theta,get_base1(taxon,n,"taxon",1),"theta",1), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("shape");
        names__.push_back("scale");
        names__.push_back("lambda");
        names__.push_back("mu");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "reflected_beta_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d theta = in__.vector_constrain(S);
        double shape = in__.scalar_lb_constrain(0);
        double scale = in__.scalar_lb_constrain(0);
        vector_d lambda = in__.vector_constrain(S);
        double mu = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(theta[k_0__]);
        }
        vars__.push_back(shape);
        vars__.push_back(scale);
        for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        vars__.push_back(mu);
        vars__.push_back(sigma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "reflected_beta_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef reflected_beta_model_namespace::reflected_beta_model stan_model;

